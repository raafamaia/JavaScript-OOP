Sumarry

JavaScript supports inheritance through prototype chaining. A prototype chain is created between objects when the [[Prototype]] of one object is set equal to another. All generic objects automatically inherit from Object .prototype. If you want to create an object that inherits from something else, you can use Object.create() to specify the value of [[Prototype]] for a new object.
You accomplish inheritance between custom types by creating a prototype chain on the constructor. By setting the constructor’s prototype property to another value, you create inheritance between instances of the custom type and the prototype of that other value. All instances of that constructor share the same prototype, so they all inherit from the same object. This technique works very well for inheriting methods from other objects, but you cannot inherit own properties using prototypes.
To inherit own properties correctly, you can use constructor stealing, which is simply calling a constructor function using call() or apply() so that any initialization is done on the subtype object. Combining construc- tor stealing and prototype chaining is the most common way to achieve inheritance between custom types in JavaScript. This combination is frequently called pseudoclassical inheritance because of its similarity
to inheritance in class-based languages.
You can access methods on a supertype by directly accessing the supertype’s prototype. In doing so, you must use call() or apply() to exe- cute the supertype method on the subtype object.