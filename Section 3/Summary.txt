Summary

It helps to think of JavaScript objects as hash maps where properties are just key/value pairs. You access object properties using either dot notation or bracket notation with a string identifier. You can add a property at any time by assigning a value to it, and you can remove a property at any time with the delete operator. You can always check whether a property exists by using the in operator on a property name and object. If the property in question is an own property, you could also use hasOwnProperty(), which exists on every object. All object properties are enumerable by default, which means that they will appear in a for-in loop or be retrieved by Object.keys().
There are two types of properties: data properties and accessor properties. Data properties are placeholders for values, and you can read from and write to them. When a data property holds a function value, the property is considered a method of the object. Unlike data properties, accessor properties don’t store values on their own; they use a combination of getters and setters to perform specific actions. You can create both data properties and accessor properties directly using object literal notation.
All properties have several associated attributes. These attributes define how the properties work. Both data and accessor properties have [[Enumerable]] and [[Configurable]] attributes. Data properties also have [[Writable]] and [[Value]] attributes, while accessor proper- ties have [[Get]] and [[Set]] attributes. By default, [[Enumerable]] and [[Configurable]] are set to true for all properties, and [[Writable]] is set to true for data properties. You can change these attributes by using Object.defineProperty() or Object.defineProperties(). It’s also possible to retrieve these attributes by using Object.getOwnPropertyDescriptor().
When you want to lock down an object’s properties in some way, there are three different ways to do so. If you use Object.preventExtensions(), objects will no longer allow properties to be added. You could also create a sealed object with the Object.seal() method, which makes that object non- extensible and makes its properties nonconfigurable. The Object.freeze() method creates a frozen object, which is a sealed object with nonwritable data properties. Be careful with nonextensible objects, and always use strict mode so that attempts to access the objects incorrectly will throw an error.